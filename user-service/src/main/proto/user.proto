syntax = "proto3";

package user;

import "google/protobuf/timestamp.proto"; // Для временных меток
import "google/api/annotations.proto"; // Для аннотаций HTTP

option java_package = "com.maks362880.user_service.proto";
option java_multiple_files = true;

service UserService {
    // Регистрация нового пользователя
    rpc Register (RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/v1/users/register"
            body: "*"
        };
    }

    // Аутентификация пользователя
    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/users/login"
            body: "*"
        };
    }

    // Получение информации о пользователе
    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            get: "/v1/users/{user_id}"
        };
    }
}

// Запрос на регистрацию
message RegisterRequest {
    string username = 1; // Имя пользователя
    string password = 2; // Пароль
    string email = 3;    // Электронная почта
    string role = 4;     // Роль пользователя (например, "driver", "passenger")
}

// Ответ на регистрацию
message RegisterResponse {
    string user_id = 1; // ID пользователя (UUID в виде строки)
    string username = 2; // Имя пользователя
    string email = 3;    // Электронная почта
    StatusCode status_code = 4; // Код статуса
    google.protobuf.Timestamp registered_at = 5; // Время регистрации
}

// Запрос на аутентификацию
message LoginRequest {
    string username = 1; // Имя пользователя
    string password = 2; // Пароль
}

// Ответ на аутентификацию
message LoginResponse {
    string user_id = 1; // ID пользователя (UUID в виде строки)
    string token = 2;   // JWT токен
    string username = 3; // Имя пользователя
    StatusCode status_code = 4; // Код статуса
}

// Запрос на получение информации о пользователе
message GetUserRequest {
    string user_id = 1; // ID пользователя (UUID в виде строки)
}

// Ответ с информацией о пользователе
message GetUserResponse {
    string user_id = 1; // ID пользователя (UUID в виде строки)
    string username = 2; // Имя пользователя
    string email = 3;    // Электронная почта
    string role = 4;     // Роль пользователя
    StatusCode status_code = 5; // Код статуса
}

// Перечисление для кодов статуса
enum StatusCode {
    SUCCESS = 0; // Успешное выполнение
    USER_NOT_FOUND = 1; // Пользователь не найден
    INVALID_CREDENTIALS = 2; // Неверные учетные данные
    USER_ALREADY_EXISTS = 3; // Пользователь уже существует
    INTERNAL_ERROR = 4; // Внутренняя ошибка сервера
}